react hooks - to get rid of redaz
###############
jargons
###############
virtual DOM -   a component which has upadted alone changes eg.if a comment being placed
		it doesnot require entire page reload, only that secction alone gets
		reloaded
props - 	properties
component ----> 1) class based - powerfull 
                2) functional based
hooks - 	

################
getting started
################
requirements
------------
-> npm -g i create-react-app //to download and install react library
-> npm start //to start the app
now for creating a project 
--> npx create-react-app project_name

react files
------------
-> the packge.json is responsible for the libraries so when even the project is   
   uploaded to github the node_modules folder is not uploaded, however it can be 
   downloaded so those things will be in package.json file

-> package-lock.json - its the core file

-> public has the images,index page, etc.

-> src has the main codes

##############
the hooks make it simple to code by using functions rather than classes
##############


to read in reactjs.org
---------
-> components & props
-> state & lifecycle


1st thing inside app.js
1) import React from 'react';
./ - same directory 
../ - before one directory 

class / className is used inside the <div> to make it more beautiful


when we have imported the file we can use {import_name} to use it inside the react
eg.
import logo from "./logo.svg"
<head><img src={logo} /></head>
======
state
======
state is king of central repo which stores the variable values

=================
when importing a folder do > npm install
so this will install the node modules and gets the project go on 

=============
when we use class insead of function 
the render is mandatory and inside render we have return 

###############
inside class we have props this is responsible for carrying our the values from other
pages when a page is called. so it has the values

###############
by member functions we can make the state changes 
to update the states, use
this.setState({
<variables......>
});

##########################
react udemy course 
##########################

this.name = -> here this points to the present component 
	    -> it has all the properties, based on instance of the class created
	    eg. name="sarfraz"
	        inside reutrn {this.name}
inside render -> if we declare a variable we have to declare its data type
	      eg. const name="sarfraz";
	          inside {name} this will show the result

#######################################
class App extends Component {
  name = "sarfraz";
  render() {
    return <div className="App">{console.log(this)}</div>;
  }
}
######################################

-> here render is a funstion anything declared within the function will have scope only
   within that 

#######################################
class App extends Component {
  name = "sarfraz";
  render() {
    return <div className="App">{console.log(this)}</div>;
  }
}

//here we declare a instance of the class and it gets the property of the class
const apps = new App();
console.log(apps.name);
#######################################
the styles is saved as styles.js it is used as central things for all styles in a component
so when we call styles in a coomponent styles.variable declared can be used to make the 
things better
so when there are 10 buttons used in a component so using styles we can make the css
easrier in implementation 
declaring styles and importing it 
---------------------------------
export const styles = {
  border: "solid",
  textAlign: "center",
  boxShadow: "2px 2px"
};

to import in App.js 
-------------------
import * as styles from "./styles.js";

to use inside the component
<div style={styles.styles}>Styles</div>
# styles.styles - it imports the specific property 

############################
seeing how react jsx works 
we can even decrale a button like this 

{React.createElement("button", { className: "App" }, "React")}

so when we create a button it calls in the above form 
so it calls the createElement class to make the button 

##############################
DOM(document object model)
##############################
-> it shows the structure of the HTML document
<html>
<head>
    <title></title>
</head>
<body>
    <h1></h1>
</body>
</html>
-> the above shows the html document type 
-> html tag is the parent off head and head is the parent of title 
-> title is no the child for html

#####################
react virtual DOM
#####################
-> the react uses virtual DOM to convert to browser unserstandable HTML DOM
-> the react virtual DOM converts the JSX expressions to browser understandable from

virtual DOM sits on                    HTML Browser
top of the browser        --->         DOM
HTML DOM

####################
-> in react the complete HTML document gets loaded 
-> the content under the body div tag alone changes 
-> reat is a single page app, its main page remains static while the values under the 
   div tag alone changes, this making it easier where as in traditional webpages
   the entire webpage gets reloaded
-> the props are known as properties it is where data's are stored

#############
components
#############
-> this is what user sees on the screen 
-> it is of two types 1) functional 2) container(class based components)
1) functional components
	-> they are read only 
2) container components
	-> they are used for user interactions 
	-> to handle data in a more complex forms

####################
-> now creating a component1 in functional folder and exporting it 

in component1.js
----------------
import React from "react";

const component1 = props =>( 
	<div>
	component1
	</div>;
);
export default component1;

this is equivalent to 
---------------------
import React from "react";

const component1 = props => {
	return( 
	<div>
	component1
	</div>;
);
}
export default component1;

-> the defualt is used so that while importing in App.js no need to use { Component} just
import Component1 from "./functional/component1.js";
and not
import { Component1 } from "./functional/component1.js";

using parameters in functional block 
------------------------------------
import React from "react";

const component1 = prop => (
  <div>
    component1
    {prop.name}
    {prop.age}
  </div>
);

export default component1;

using parameters in container block
-----------------------------------
import React, { Component } from "react";

class Container1 extends Component {
  render() {
    return <div>{this.props.nickname}</div>;
  }
}
export default Container1;

conclusion of both 
==================
-> both of them have nearly the same syntaz in App.js while importing in it 
<Container1 nickname="sarf" age={22}/>
-> but in container the props should be used to get the property values but in case of 
   component any name is fine
##############
state
##############
-> the states should not be directly changed so use setState to change the state
-> we can get the present data using prevState
eg. (prevState, props) => ({
    	this.setState({stateprop2: prevState.stateprop2 + 1})
	});
#the above code sets the changed state
-> we also set the state in this format also
eg. () => {
	this.setState({stateprop2: this.state.stateprop2 + 1});
	};
-> the setState can be called multiple times, it goes without any error

conditions 
------------
if(){
}
else
{
}
this can be normally used but it should not be used 
how ever we can use a ternary opertator
{true ? <div>condition1</div> : <div>condition2</div> }

############
react life cycles
two important life cycle methods
1) component did mount
2) component will mount

1) component did mount - this works after the component has been rendered
2) componentt will mount - this works after user going off from that page

###########
rendering list items

//declaring a array

  Arr = [
    { id: 1, text: "text1", number: 1 },
    { id: 2, text: "text1", number: 2 },
    { id: 3, text: "text1", number: 3 },
    { id: 4, text: "text1", number: 4 },
    { id: 5, text: "text1", number: 5 }
  ];

  RenderList = props => (
    <div>
      {props.item.number}
      {props.item.text}
    </div>
  );

  render() {
    return (
      <div>
      //{this.Arr.map((item, index) => (console.log(item)))} // this shows the item in the console and if we have index this also shows the 
      // list
        {this.Arr.map(item => (
          <this.RenderList key={item.id} item={item} />
        ))}
      </div>
    );
  }

the above is the code for rendering the list item

###############################################################################
the bellow is the code using this operator and using the set state and defining the value to state and putting it in the 
div tag

class Container1 extends Component {
  state = {
    value: ""
  };
  // this is used to handle the change in the value
  handleChange = value => {
    console.log(value.target.value);
    this.setState({ value: value.target.value });
  };
  //this is used to handle the on click event
  handleSubmit = vals => {
    vals.preventDefault();
    console.log(vals.target.name.value);
  };

  render() {
    return (
      <div>
        {this.state.value}
        <form onSubmit={this.handleSubmit}>
          <p>Name</p>
          <input type="text" id="name" onChange={this.handleChange}></input>
          <button type="submit">Submit</button>
        </form>
      </div>
    );
  }
}
export default Container1;

############################################################################
**********now using the function instead of this operator*******************

class Container1 extends Component {
  
  // the constructor is used to make the handle functions access the this of the class by binding them in the constuctor 
  // since they are functions using this makes them access values only inside the functions 
  // thus binding them in constructor makes them access the global this
  
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }
  state = {
    value: ""
  };
  // this is used to handle the change in the value
  handleChange(value) {
    console.log(value.target.value);
    this.setState({ value: value.target.value });
  }
  //this is used to handle the on click event
  handleSubmit(vals) {
    vals.preventDefault();
    console.log(vals.target.name.value);
  }

  render() {
    return (
      <div>
        {this.state.value}
        <form onSubmit={this.handleSubmit}>
          <p>Name</p>
          <input type="text" id="name" onChange={this.handleChange}></input>
          <button type="submit">Submit</button>
        </form>
      </div>
    );
  }
}
export default Container1;
Schedule Fulfilment Date - அட்டவணை நிறைவேற்றும் தேதி
Enrich Customer Order - வாடிக்கையாளர் ஆர்டரை வளப்படுத்தவும்
Distribute Customer Order - வாடிக்கையாளர் ஆர்டரை விநியோகிக்கவும்
Update distribution status - விநியோக நிலையைப் புதுப்பிக்கவும்

oc ----(FQCO)---->OEBaseClient-----(OE Acceptance)----> ""|


bill bpcode capital 
bill bpcode small letters

0120-4397535

===================================
kafka
-> it acts as a middle ware between systems
-> since the traffic can be high the kafka can be used for increasing the 
   performance


source -------> producers -------> kafka -------> consumers ------> target 
system				     |				    systems
		                     |
				 Zookeeper

-> kafka is like a ram 
-> kafka connect helps in connecting with the database

###################
react 

---------------
Redux
---------------
-> global state is redux
-> its state changes are using actions
-> so any component can contact this global thing and update the value
-> 3 principles
	-> there is only one source of truth - one db
	-> State is ready-only # however we can update the state using actions
	-> changes re made with pure functions

		react			redux			react-redux

update state    this.setState()		store.dispatch()	mapDispathToProps()
								this.props.dispatch_action()

Read State	this.state.state_prop() store.getState()	mapStateToProps()
								this.props.state_property


##############
reduz -> 1) Actions
	 2) Reducers

1) Actions - eg is a user logs in then isAuth=True is set 
	-> it happens when ever an action occurs like loggin in, changing page etc

2)Reducers
	-> 

components -> Dispatch -> Actions -> Reducers -> central storage -> triggers -> Subscription -> passes updated state to props -|
     ^															       |
     |															       |
     |_________________________________________________________________________________________________________________________|


using actions and reducers 

####################################
action_types.js - it has the values 
####################################
export const SUCCESS = "SUCCESS";
export const FAILURE = "FAILURE";
####################################


###################################
actions.js - it has the export thing values
###################################
import * as ACTION_TYPES from "./action_types.js";

export const SUCCESS = {
  type: ACTION_TYPES.SUCCESS
};

export const FAILURE = {
  type: ACTION_TYPES.FAILURE
};
###################################

#############################
reducers.js - its the change state type
#############################
import * as ACTION_TYPES from "../actions/action_types";

const initialState = {
  stateprop1: false
};

// the actions are the default keyword of ES6, it can be used for logging in etc...
const rootReducer = (state = initialState, action) => {
  switch (action.type) {
    case ACTION_TYPES.SUCCESS:
      return {
        // its the spread operator which make previous copy of the state
        ...state,
        stateprop1: true
      };
    case ACTION_TYPES.FAILURE:
      return {
        ...state,
        stateprop1: false
      };
    default:
      return state;
  }
};

export default rootReducer;
#############################
	
#############################
index.js
#############################
import { Provider } from "react-redux";
import rootReducer from "./store/reducers/reducers.js";
import { createStore } from "redux";

let store = createStore(rootReducer);

//the store uses the varibales globally available and gets the value
ReactDOM.render(
  <Provider store={store}>
    {" "}
    <App />
  </Provider>,
  document.getElementById("root")
);

##################
connect()
##################
read & actions container- connect(mapStateToProps,mapDispatchToProps)(container)
read only container	- connect(mapStateToProps)(container)
actions only container  - connect(null, mapDispatchToProps)(container)

****************
Reducers 
********
now using two reducers and combining it in index.js in reducer directory itself

1st reducer reducers.js
=======================
import * as ACTION_TYPES from "../actions/action_types";

const initialState = {
  stateprop1: false
};

const Reducer1 = (state = initialState, action) => {
  switch (action.type) {
    case ACTION_TYPES.SUCCESS:
      return {
        // its the spread operator which make previous copy of the state
        ...state,
        stateprop1: true
      };
    case ACTION_TYPES.FAILURE:
      return {
        ...state,
        stateprop1: false
      };
    default:
      return state;
  }
};

export default Reducer1;

2nd reducer User_Reducer
************************
import * as ACTION_TYPES from "../actions/action_types";

const initialState = {
  user_text: "vals"
};

const UserReducer = (state = initialState, action) => {
  switch (action.type) {
    case ACTION_TYPES.USER_INPUT:
      return {
        ...state,
        user_text: action.payload
      };

    default:
      return state;
  }
};

export default UserReducer;

combined index.js reducer 
*************************
import Reducer1 from "./reducers";
import UserReducer from "./user_reducer";
import { combineReducers } from "redux";

const rootReducer = combineReducers({
  reducer1: Reducer1,
  user_reducer: UserReducer
});

export default rootReducer;

while importing it in index.js main file just point to reducer directory it will automatically take things
before
++++++
import rootReducer from "./store/reducers/reducer.js";

after
+++++
import rootReducer from "./store/reducers";

########################
router - it is the parent componenet
route - it makes the route specific to the component

#######################
now creating header.js 
it has the links which need to be directed 

<Link to={{pathname: '', search: , hash: ,state}}

pathname -  its the pathname eg. /container
search - to write quries using API's
hash - its similar in vanilla java script
state - a java script obj, kind of state 

-> since the react is a single page application when we click the back button, it goes to the home page
   hence the history library is used to maintain the routes, etc

using history in js 
===================
import createHistory from "history/createBrowserHistory";

export default createHistory();

-> in above the createHistory() this () is mandotory otherwise it will not work 

the header.js - it has the link values 
import React, { Component } from "react";
import { Link } from "react-router-dom";

class Header extends Component {
  render() {
    return (
      <div>
        <Link to="component1">component 1</Link>
        <Link to="component2">component 2</Link>
        <Link to="component3">component 3</Link>
      </div>
    );
  }
}

export default Header;

-> the 'to' puts the path in the url and the name in between the link is displayed in the screen

after clicking that it goes to the routes 
==========================================
import React, { Component } from "react";
import Component1 from "./functional/component1";
import Component2 from "./functional/component2";
import Component3 from "./functional/component3";

import history from "./utils/history";
import Header from "./container/header";
import Container1 from "./container/container1";

import { Router, Route } from "react-router";

class Routes extends Component {
  render() {
    return (
      <div>
        <Router history={history}>
          {/* //need to wrap under single div after the parent Router */}
          <div>
            <Header />
            <Route path="/container1" component={Container1} />
            <Route path="/component1" component={Component1} />
            <Route path="/component2" component={Component2} />
            <Route path="/component3" component={Component3} />
          </div>
        </Router>
      </div>
    );
  }
}

export default Routes;

-> based on the url the component gets loaded and the contents of that component is displayed 
-> the <Router history={history}> its the parent component and history if maily required else the back 
   button goes to the home page
-> history if mandotory else the page will throw (TypeError: Cannot read property 'location' of undefined)

==================
problem faced
==================
-> /home displays a webpage
-> /home/component display the content of the component along with the home page 
-> the swith is included in 'react-router' so that only those components gets loaded and not the entire home page itself

++++++++++++++
before switch
++++++++++++++
import React, { Component } from "react";
import Component1 from "./functional/component1";
import Component2 from "./functional/component2";
import Component3 from "./functional/component3";

import history from "./utils/history";
import Header from "./container/header";
import Container1 from "./container/container1";

import { Router, Route } from "react-router";

class Routes extends Component {
  render() {
    return (
      <div>
        <Router history={history}>
          {/* //need to wrap under single div after the parent Router */}
          <div>
            <Header />
              <Route path="/" component={Container1} />
              <Route path="/component1" component={Component1} />
              <Route path="/component2" component={Component2} />
              <Route path="/component3" component={Component3} />
          </div>
        </Router>
      </div>
    );
  }
}

export default Routes;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
to make it switch only to that component we use switch in 'react-router'
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
import React, { Component } from "react";
import Component1 from "./functional/component1";
import Component2 from "./functional/component2";
import Component3 from "./functional/component3";

import history from "./utils/history";
import Header from "./container/header";
import Container1 from "./container/container1";

import { Router, Route, Switch } from "react-router";

class Routes extends Component {
  render() {
    return (
      <div>
        <Router history={history}>
          {/* //need to wrap under single div after the parent Router */}
          <div>
            <Header />
            <Switch>
              <Route exact path="/" component={Container1} />
              <Route path="/component1" component={Component1} />
              <Route path="/component2" component={Component2} />
              <Route path="/component3" component={Component3} />
            </Switch>
          </div>
        </Router>
      </div>
    );
  }
}

export default Routes;
==========================
-> the exact keyword in path="/" is important to make the switching of the component
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

passing props in the router 
+++++++++++++++++++++++++++++
eg. <Route path="/component1" component={Component1} />
-> insead of using component= we can also use render= & pass the component values

<Route path="/component1" render={(props) => <Component1 {...props} />} />
-> The {...props} its mandatory to pass the values to the component

#################################
#################################
#  				#
#  state syntax is 		#
#  state= and not state:	#
#				#
#################################
#################################

now dynamically setting up the route
####################################

-> the header file for dynamic routing 
import React, { Component } from "react";
import { Link } from "react-router-dom";

class Header extends Component {
  state = {
    num: [{ id: 1 }, { id: 2 }, { id: 3 }]
  };
  render() {
    return (
      <div>
        <Link to="/" style={{ padding: "5px" }}>
          home
        </Link>
        {this.state.num.map(num => (
          <Link
            key={num.id}
            to={{ pathname: "/component/" + num.id }}
            style={{ padding: "5px" }}
          >
            component {num.id}
          </Link>
        ))}
      </div>
    );
  }
}

export default Header;
++++++++++++++++++++++++
-> the this.state.num.map it is used to map the values and create a dynamic webpage

in route file 
+++++++++++++++++++++++++
import React, { Component } from "react";
import Component1 from "./functional/component1";
import history from "./utils/history";
import Header from "./container/header";
import Container1 from "./container/container1";
import { Router, Route, Switch } from "react-router";

class Routes extends Component {
  render() {
    return (
      <div>
        <Router history={history}>
          {/* //need to wrap under single div after the parent Router */}
          <div>
            <Header />
            <Switch>
              <Route exact path="/" component={Container1} />
              {/* <Route path="/component1" component={Component1} /> */}
              <Route
                path="/component/:id"
                render={props => <Component1 {...props} />}
              />
            </Switch>
          </div>
        </Router>
      </div>
    );
  }
}

export default Routes;
++++++++++++++++++++++++++++++++
-> the props is passed as variable and those values are displayed in the page

changes in component 1
++++++++++++++++++++++++

import React from "react";

const component1 = prop => (
  <div>
    component {prop.match.params.id}
    {console.log(prop)}
  </div>
);

export default component1;

++++++++++++++++++++++++++++
auth0 authendication 

user clicks the -> auth0 SDK redirects to  	    ->  Autho0 Page (not part of out web) -> user Credentials are   ->  if the user credentials match -----
login button	   Auth0 hosted page(Auth0 server)	allows user to sign in or signup     securely sent to auth0     Auth0 returns a JWT Token



the JWT token is saved   ->  we use React to check if        -> if Yes, User is Authenticated
in local browser storage     a JWT token is present in local
			     browser storage

+++++++++++++++++++++++++++
-> setup auth.js in utils 

the content inside the code is 
import auth0 from "auth0-js";

export default class Auth {
  //this webAuth is responsible for authorization
  auth0 = new auth0.WebAuth({
    domain: "fakrudeen.auth0.com",
    clientID: "8t57FvLYzpx5xEC3RsLSKzPEHs9RJE48",
    redirectUri: "http://localhost:3000/callback",
    responseType: "token id_token",
    scope: "openid profile email"
  });

  login = () => {
    this.auth0.authorize();
  };
}

-> then import it in the component and complete the authorization 
	->import Auth from "../utils/auth";
	->const auth = new Auth();
	-><button onClick={() => auth.login()}>Login</button> // this completes the login

-> once the login/signup is complete the auth send a response back in url in field id_token=values........
	-> which is a coded form of josn
	-> it has information that can be decoded and used 
	-> it can parsed using jwt.io

=============================
=> when we face issues in storing values make sure to look at the API calls values has the same variables


user logs in -> user is redirected to   -> user is redirected to the   ->  user is redirected to the
		the callback component     auth-check container where	   Home page with the updated 
		from Auth0		   the redux state is updated	   redux state


user logs out -> user is redirected to the aut-check  -> user is redirected to the
		 container where the redux state is 	 home page with the updated
		 updated				 redux state

====================
now enabling /authcheck route
=> when the customer logs in then the call automatically goes to /callback & to /authcheck 
=> the authcheck is where we check the login successfullness, etc 
